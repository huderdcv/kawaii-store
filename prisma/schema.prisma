generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// PARA PRODUCTS
enum ThemeCategory {
  anime
  kpop
  none
}

enum CountryOfOrigin {
  korea
  japan
  china
  other
}

enum ProductType {
  individual
  pack
}

enum AvailabilityType {
  general
  exclusive
}

// PARA USER
enum Role {
  admin
  user
}

// TABLAS

model Franchise {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id                   String           @id @default(uuid())
  title                String
  description          String
  inStock              Int
  price                Float            @default(0)
  kawaiiPointsRequired Float            @default(0)
  kawaiiPointsEarned   Float            @default(1)
  countryOfOrigin      CountryOfOrigin  @default(other)
  productType          ProductType      @default(individual)
  availabilityType     AvailabilityType @default(general)
  slug                 String           @unique
  tags                 String[]         @default([])
  themeCategory        ThemeCategory    @default(none)

  // Relaciones

  franchise   Franchise @relation(fields: [franchiseId], references: [id])
  franchiseId String

  ProductImage ProductImage[]
  OrderItem    OrderItem[]

  @@index([themeCategory])
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String
  role          Role         @default(user)
  image         String?
  kawaiiPoints  Int          @default(0)
  address       UserAddress?

  // Relaciones
  Order Order[]
}

model Country {
  id   String @id
  name String

  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String

  // Relaciones
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

// Order de compras
model Order {
  id             String    @id @default(uuid())
  subTotal       Float
  tax            Float
  total          Float
  itemsInOrder   Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isPaid         Boolean   @default(false)
  paidAt         DateTime?
  isSent         Boolean   @default(false)
  sentAt         DateTime?
  isDelivered    Boolean   @default(false)
  deliveredAt    DateTime?
  trackingNumber String?

  // Relaciones
  user   User   @relation(fields: [userId], references: [id])
  userId String

  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float

  // Relaciones
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String

  // Relaciones
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}
